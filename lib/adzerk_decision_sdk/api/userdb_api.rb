=begin
#Adzerk Decision API

#Adzerk Decision API

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module AdzerkDecisionSdk
  class UserdbApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Custom Properties to a User
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [File]
    def add_custom_properties(network_id, user_key, opts = {})
      data, _status_code, _headers = add_custom_properties_with_http_info(network_id, user_key, opts)
      data
    end

    # Add Custom Properties to a User
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def add_custom_properties_with_http_info(network_id, user_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserdbApi.add_custom_properties ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling UserdbApi.add_custom_properties"
      end
      # verify the required parameter 'user_key' is set
      if @api_client.config.client_side_validation && user_key.nil?
        fail ArgumentError, "Missing the required parameter 'user_key' when calling UserdbApi.add_custom_properties"
      end
      # resource path
      local_var_path = '/udb/{networkId}/custom'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userKey'] = user_key

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/gif'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserdbApi#add_custom_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Interests to a User
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param interest [String] Comma Seperated list of interests
    # @param [Hash] opts the optional parameters
    # @return [File]
    def add_interests(network_id, user_key, interest, opts = {})
      data, _status_code, _headers = add_interests_with_http_info(network_id, user_key, interest, opts)
      data
    end

    # Add Interests to a User
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param interest [String] Comma Seperated list of interests
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def add_interests_with_http_info(network_id, user_key, interest, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserdbApi.add_interests ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling UserdbApi.add_interests"
      end
      # verify the required parameter 'user_key' is set
      if @api_client.config.client_side_validation && user_key.nil?
        fail ArgumentError, "Missing the required parameter 'user_key' when calling UserdbApi.add_interests"
      end
      # verify the required parameter 'interest' is set
      if @api_client.config.client_side_validation && interest.nil?
        fail ArgumentError, "Missing the required parameter 'interest' when calling UserdbApi.add_interests"
      end
      # resource path
      local_var_path = '/udb/{networkId}/interest/i.gif'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userKey'] = user_key
      query_params[:'interest'] = interest

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/gif'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserdbApi#add_interests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add User to a Retargeting Segment
    # @param network_id [Integer] Your Network Id
    # @param advertiser_id [Integer] The Advertiser&#39;s ID
    # @param retargeting_segment_id [Integer] The Segment&#39;s ID
    # @param user_key [String] The User&#39;s UserDB Key
    # @param [Hash] opts the optional parameters
    # @return [File]
    def add_retargeting_segment(network_id, advertiser_id, retargeting_segment_id, user_key, opts = {})
      data, _status_code, _headers = add_retargeting_segment_with_http_info(network_id, advertiser_id, retargeting_segment_id, user_key, opts)
      data
    end

    # Add User to a Retargeting Segment
    # @param network_id [Integer] Your Network Id
    # @param advertiser_id [Integer] The Advertiser&#39;s ID
    # @param retargeting_segment_id [Integer] The Segment&#39;s ID
    # @param user_key [String] The User&#39;s UserDB Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def add_retargeting_segment_with_http_info(network_id, advertiser_id, retargeting_segment_id, user_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserdbApi.add_retargeting_segment ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling UserdbApi.add_retargeting_segment"
      end
      # verify the required parameter 'advertiser_id' is set
      if @api_client.config.client_side_validation && advertiser_id.nil?
        fail ArgumentError, "Missing the required parameter 'advertiser_id' when calling UserdbApi.add_retargeting_segment"
      end
      # verify the required parameter 'retargeting_segment_id' is set
      if @api_client.config.client_side_validation && retargeting_segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'retargeting_segment_id' when calling UserdbApi.add_retargeting_segment"
      end
      # verify the required parameter 'user_key' is set
      if @api_client.config.client_side_validation && user_key.nil?
        fail ArgumentError, "Missing the required parameter 'user_key' when calling UserdbApi.add_retargeting_segment"
      end
      # resource path
      local_var_path = '/udb/{networkId}/rt/{advertiserId}/{retargetingSegmentId}/i.gif'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s)).sub('{' + 'advertiserId' + '}', CGI.escape(advertiser_id.to_s)).sub('{' + 'retargetingSegmentId' + '}', CGI.escape(retargeting_segment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userKey'] = user_key

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/gif'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserdbApi#add_retargeting_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Forget User
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def forget(network_id, user_key, opts = {})
      forget_with_http_info(network_id, user_key, opts)
      nil
    end

    # Forget User
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def forget_with_http_info(network_id, user_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserdbApi.forget ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling UserdbApi.forget"
      end
      # verify the required parameter 'user_key' is set
      if @api_client.config.client_side_validation && user_key.nil?
        fail ArgumentError, "Missing the required parameter 'user_key' when calling UserdbApi.forget"
      end
      # resource path
      local_var_path = '/udb/{networkId}'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userKey'] = user_key

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserdbApi#forget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GDPR Consent
    # @param network_id [Integer] Your Network Id
    # @param [Hash] opts the optional parameters
    # @option opts [ConsentRequest] :consent_request 
    # @return [File]
    def gdpr_consent(network_id, opts = {})
      data, _status_code, _headers = gdpr_consent_with_http_info(network_id, opts)
      data
    end

    # GDPR Consent
    # @param network_id [Integer] Your Network Id
    # @param [Hash] opts the optional parameters
    # @option opts [ConsentRequest] :consent_request 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def gdpr_consent_with_http_info(network_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserdbApi.gdpr_consent ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling UserdbApi.gdpr_consent"
      end
      # resource path
      local_var_path = '/udb/{networkId}/consent'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/gif'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'consent_request']) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserdbApi#gdpr_consent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # IP Address Override
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param ip [String] This is the IP to exclude
    # @param [Hash] opts the optional parameters
    # @return [File]
    def ip_override(network_id, user_key, ip, opts = {})
      data, _status_code, _headers = ip_override_with_http_info(network_id, user_key, ip, opts)
      data
    end

    # IP Address Override
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param ip [String] This is the IP to exclude
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def ip_override_with_http_info(network_id, user_key, ip, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserdbApi.ip_override ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling UserdbApi.ip_override"
      end
      # verify the required parameter 'user_key' is set
      if @api_client.config.client_side_validation && user_key.nil?
        fail ArgumentError, "Missing the required parameter 'user_key' when calling UserdbApi.ip_override"
      end
      # verify the required parameter 'ip' is set
      if @api_client.config.client_side_validation && ip.nil?
        fail ArgumentError, "Missing the required parameter 'ip' when calling UserdbApi.ip_override"
      end
      # resource path
      local_var_path = '/udb/{networkId}/ip/i.gif'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userKey'] = user_key
      query_params[:'ip'] = ip

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/gif'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserdbApi#ip_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # User Matching
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param partner_id [Integer] The ID of the RTB provider in Adzerk. Contact Support if you don&#39;t have the ID.
    # @param user_id [Integer] This is the UserID the individual RTB provider has of the user. This is NOT the UserDB userkey.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def match_user(network_id, user_key, partner_id, user_id, opts = {})
      data, _status_code, _headers = match_user_with_http_info(network_id, user_key, partner_id, user_id, opts)
      data
    end

    # User Matching
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param partner_id [Integer] The ID of the RTB provider in Adzerk. Contact Support if you don&#39;t have the ID.
    # @param user_id [Integer] This is the UserID the individual RTB provider has of the user. This is NOT the UserDB userkey.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def match_user_with_http_info(network_id, user_key, partner_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserdbApi.match_user ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling UserdbApi.match_user"
      end
      # verify the required parameter 'user_key' is set
      if @api_client.config.client_side_validation && user_key.nil?
        fail ArgumentError, "Missing the required parameter 'user_key' when calling UserdbApi.match_user"
      end
      # verify the required parameter 'partner_id' is set
      if @api_client.config.client_side_validation && partner_id.nil?
        fail ArgumentError, "Missing the required parameter 'partner_id' when calling UserdbApi.match_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserdbApi.match_user"
      end
      # resource path
      local_var_path = '/udb/{networkId}/sync/i.gif'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userKey'] = user_key
      query_params[:'partnerId'] = partner_id
      query_params[:'userId'] = user_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/gif'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserdbApi#match_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Opt-Out a User
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param [Hash] opts the optional parameters
    # @return [File]
    def opt_out(network_id, user_key, opts = {})
      data, _status_code, _headers = opt_out_with_http_info(network_id, user_key, opts)
      data
    end

    # Opt-Out a User
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def opt_out_with_http_info(network_id, user_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserdbApi.opt_out ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling UserdbApi.opt_out"
      end
      # verify the required parameter 'user_key' is set
      if @api_client.config.client_side_validation && user_key.nil?
        fail ArgumentError, "Missing the required parameter 'user_key' when calling UserdbApi.opt_out"
      end
      # resource path
      local_var_path = '/udb/{networkId}/optout/i.gif'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userKey'] = user_key

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/gif'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserdbApi#opt_out\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read a User's UserDB Record
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def read(network_id, user_key, opts = {})
      data, _status_code, _headers = read_with_http_info(network_id, user_key, opts)
      data
    end

    # Read a User&#39;s UserDB Record
    # @param network_id [Integer] Your Network Id
    # @param user_key [String] The User&#39;s UserDB Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def read_with_http_info(network_id, user_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserdbApi.read ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling UserdbApi.read"
      end
      # verify the required parameter 'user_key' is set
      if @api_client.config.client_side_validation && user_key.nil?
        fail ArgumentError, "Missing the required parameter 'user_key' when calling UserdbApi.read"
      end
      # resource path
      local_var_path = '/udb/{networkId}/read'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userKey'] = user_key

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserdbApi#read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
